# -*- coding: utf-8 -*-
"""Adhikansh Gami ANN DEEP learning

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FR2x3W_n-BWgLrPGAXlgFmYW_tXtyOeC
"""

pip install tensorflow

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/content/Churn_Modelling.csv')
print(df.head(10))

x= df.iloc[:,3:13]
y= df.iloc[:,13]

print(x)

print(y)

geography = pd.get_dummies(x['Geography'], drop_first=True)
gender = pd.get_dummies(x['Gender'], drop_first=True)

x=x.drop(['Geography','Gender'], axis=1)

x.head()

x=pd.concat([x,geography,gender], axis=1)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

x_train

y_train

y_test

y_train.shape

x_test

x_train.shape

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LeakyReLU, PReLU, ELU, ReLU
from tensorflow.keras.layers import Dropout

classifier= Sequential()

classifier.add(Dense(units=11,activation='relu'))

#classifier.add(Dense(units=8,activation='relu'))

classifier.add(Dense(units=7,activation='relu'))

classifier.add(Dense(units=6,activation='relu'))

#classifier.add(Dense(units=5,activation='relu'))

#classifier.add(Dense(units=4,activation='relu'))

classifier.add(Dense(units=1,activation='sigmoid'))

classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model_history = classifier.fit(x_train, y_train, validation_split=0.33, batch_size=100, epochs=100)

model_history.history.keys()

plt.plot(model_history.history['accuracy'])
plt.plot(model_history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

y_pred = classifier.predict(x_test)
y_pred = (y_pred > 0.5)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

classifier.get_weights()

classifier.summary()

